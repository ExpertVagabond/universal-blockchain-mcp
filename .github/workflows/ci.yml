name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript build
      run: npm run build
      
    - name: Run integration tests
      run: node tests/integration.test.js
      
    - name: Verify MCP server functionality
      run: |
        timeout 10s node dist/index.js &
        sleep 2
        echo '{"jsonrpc":"2.0","id":1,"method":"tools/list"}' | node dist/index.js | grep -q "create_contract"
        
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: |
        npm audit --json > audit.json
        cat audit.json
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check TypeScript compilation
      run: npm run build
      
    - name: Validate package.json
      run: npm run build && test -f dist/index.js
      
    - name: Check for required files
      run: |
        test -f package.json
        test -f tsconfig.json
        test -f smithery.yaml
        test -f README.md
        
  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Create distribution package
      run: |
        mkdir -p release
        cp -r dist/ release/
        cp package.json release/
        cp smithery.yaml release/
        cp README.md release/
        cp -r examples/ release/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zetachain-mcp-server-${{ github.sha }}
        path: release/
        retention-days: 30
        
  smithery-deploy:
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Install Smithery CLI
      run: npm install -g @smithery/cli
      
    - name: Deploy to Smithery (if token available)
      env:
        SMITHERY_API_TOKEN: ${{ secrets.SMITHERY_API_TOKEN }}
      run: |
        if [ -n "$SMITHERY_API_TOKEN" ]; then
          echo "Deploying to Smithery marketplace..."
          smithery login --token $SMITHERY_API_TOKEN
          smithery deploy .
        else
          echo "Smithery API token not available, skipping deployment"
          echo "To enable automatic deployment, add SMITHERY_API_TOKEN to repository secrets"
        fi
      continue-on-error: true
      
  release:
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: zetachain-mcp-server-${{ github.sha }}
        path: release/
        
    - name: Create release package
      run: |
        cd release
        tar -czf ../zetachain-mcp-server-${{ github.ref_name }}.tar.gz .
        cd ..
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ZetaChain MCP Server ${{ github.ref }}
        body: |
          ## ZetaChain MCP Server Release ${{ github.ref_name }}
          
          ### Features
          - 8 ZetaChain development tools
          - Full MCP protocol compliance
          - Cross-chain smart contract support
          - Comprehensive error handling
          - TypeScript implementation
          
          ### Installation
          ```bash
          npm install -g zetachain-mcp-server
          ```
          
          ### Smithery Deployment
          ```json
          {
            "mcpServers": {
              "zetachain": {
                "command": "npx",
                "args": ["-y", "@smithery/cli", "run", "ExpertVagabond/zetachain-mcp-server"]
              }
            }
          }
          ```
          
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./zetachain-mcp-server-${{ github.ref_name }}.tar.gz
        asset_name: zetachain-mcp-server-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip