#!/bin/bash

# ZetaChain CLI - Real Structure (based on usage statistics)
ZETACHAIN_MCP_URL="http://localhost:8082/mcp"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# Helper function to call MCP server
call_zetachain() {
    local tool_name="$1"
    local arguments="$2"
    
    curl -s -X POST "$ZETACHAIN_MCP_URL" \
        -H "Content-Type: application/json" \
        -d "{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"tools/call\",\"params\":{\"name\":\"$tool_name\",\"arguments\":$arguments}}" | jq -r '.result.content[0].text // .result // .error // "{}"'
}

# AI Assistant (Most used command - 124 executions)
zetachain_ask() {
    local question="$*"
    if [ -z "$question" ]; then
        echo -e "${BLUE}ü§ñ ZetaChain Ask - AI Blockchain Assistant${NC}"
        echo "Ask me anything about ZetaChain, cross-chain operations, DeFi, or blockchain!"
        echo ""
        echo "Examples:"
        echo "  zetachain ask 'How do I bridge ETH to ZetaChain?'"
        echo "  zetachain ask 'What are the best DeFi pools?'"
        echo "  zetachain ask 'How do I structure transfer commands?'"
        echo "  zetachain ask 'What is the proper format for deposits?'"
        return
    fi
    
    echo -e "${BLUE}ü§ñ ZetaChain Ask: $question${NC}"
    echo ""
    
    # Provide contextual responses based on the real CLI usage patterns
    case "$question" in
        *"transfer"*|*"withdraw"*|*"deposit"*)
            echo -e "${GREEN}üí∞ Transfer/Deposit/Withdraw Commands Structure:${NC}"
            echo ""
            echo "üîπ DEPOSITS (Cross-chain to ZetaChain):"
            echo "  ‚Ä¢ zetachain solana deposit <amount> <recipient>"
            echo "  ‚Ä¢ zetachain evm deposit <amount> <recipient>"
            echo "  ‚Ä¢ zetachain sui deposit <amount> <recipient>"
            echo "  ‚Ä¢ zetachain bitcoin memo deposit <amount> <recipient> <memo>"
            echo "  ‚Ä¢ zetachain ton deposit <amount> <recipient>"
            echo ""
            echo "üîπ WITHDRAWALS (ZetaChain to other chains):"
            echo "  ‚Ä¢ zetachain zetachain withdraw <chain> <amount> <recipient>"
            echo "  ‚Ä¢ zetachain zetachain withdraw-and-call <chain> <amount> <recipient> <data>"
            echo ""
            echo "üîπ ADVANCED OPERATIONS:"
            echo "  ‚Ä¢ zetachain evm deposit-and-call <amount> <recipient> <data>"
            echo "  ‚Ä¢ zetachain solana deposit-and-call <amount> <recipient> <data>"
            echo "  ‚Ä¢ zetachain sui deposit-and-call <amount> <recipient> <data>"
            echo "  ‚Ä¢ zetachain bitcoin memo call <amount> <recipient> <memo>"
            echo "  ‚Ä¢ zetachain bitcoin inscription deposit <amount> <recipient>"
            echo ""
            ;;
        *"account"*|*"wallet"*)
            echo -e "${GREEN}üîë Account Management Commands:${NC}"
            echo ""
            echo "  ‚Ä¢ zetachain accounts list           - List all accounts (114 uses)"
            echo "  ‚Ä¢ zetachain accounts show <name>    - Show account details (53 uses)"
            echo "  ‚Ä¢ zetachain accounts create <name>  - Create new account (24 uses)"
            echo "  ‚Ä¢ zetachain accounts import <key>   - Import account (25 uses)"
            echo "  ‚Ä¢ zetachain accounts delete <name>  - Delete account (21 uses)"
            echo ""
            ;;
        *"query"*|*"balance"*|*"chain"*)
            echo -e "${GREEN}üìä Query Commands:${NC}"
            echo ""
            echo "  ‚Ä¢ zetachain query balances <address>     - Check balances (81 uses)"
            echo "  ‚Ä¢ zetachain query chains list            - List supported chains (53 uses)"
            echo "  ‚Ä¢ zetachain query chains show <chain>    - Show chain details (19 uses)"
            echo "  ‚Ä¢ zetachain query cctx <hash>            - Cross-chain tx status (50 uses)"
            echo "  ‚Ä¢ zetachain query tokens list            - List tokens (22 uses)"
            echo "  ‚Ä¢ zetachain query tokens show <token>    - Show token details (28 uses)"
            echo "  ‚Ä¢ zetachain query fees                   - Query fees (13 uses)"
            echo ""
            ;;
        *"localnet"*|*"network"*)
            echo -e "${GREEN}üåê Local Network Commands:${NC}"
            echo ""
            echo "  ‚Ä¢ zetachain localnet start    - Start local network (81 uses)"
            echo "  ‚Ä¢ zetachain localnet check    - Check network status (70 uses)"
            echo "  ‚Ä¢ zetachain localnet stop     - Stop local network (9 uses)"
            echo ""
            ;;
        *"encode"*|*"call"*)
            echo -e "${GREEN}‚öôÔ∏è Advanced Operations:${NC}"
            echo ""
            echo "  ‚Ä¢ zetachain solana encode <data>           - Encode Solana data (10 uses)"
            echo "  ‚Ä¢ zetachain sui encode <data>              - Encode Sui data (4 uses)"
            echo "  ‚Ä¢ zetachain bitcoin inscription encode     - Encode Bitcoin inscription (3 uses)"
            echo "  ‚Ä¢ zetachain zetachain call <contract>      - Call ZetaChain contract (14 uses)"
            echo "  ‚Ä¢ zetachain evm call <contract>            - Call EVM contract (3 uses)"
            echo "  ‚Ä¢ zetachain solana call <program>          - Call Solana program (6 uses)"
            echo ""
            ;;
        *"structure"*|*"format"*|*"command"*)
            echo -e "${GREEN}üìã ZetaChain CLI Command Structure:${NC}"
            echo ""
            echo "The real ZetaChain CLI follows this pattern:"
            echo ""
            echo "üîπ SUBCOMMAND STRUCTURE:"
            echo "  zetachain <category> <action> [parameters]"
            echo ""
            echo "üîπ MAIN CATEGORIES:"
            echo "  ‚Ä¢ accounts    - Wallet/account management"
            echo "  ‚Ä¢ query       - Blockchain queries and data"
            echo "  ‚Ä¢ localnet    - Local network operations"
            echo "  ‚Ä¢ ask         - AI assistant"
            echo "  ‚Ä¢ chat        - Interactive chat"
            echo "  ‚Ä¢ docs        - Documentation"
            echo "  ‚Ä¢ faucet      - Request test tokens"
            echo "  ‚Ä¢ new         - Create new projects"
            echo "  ‚Ä¢ run         - Run applications"
            echo ""
            echo "üîπ CHAIN-SPECIFIC OPERATIONS:"
            echo "  ‚Ä¢ solana      - Solana blockchain operations"
            echo "  ‚Ä¢ evm         - EVM-compatible chains"
            echo "  ‚Ä¢ sui         - Sui blockchain operations"
            echo "  ‚Ä¢ bitcoin     - Bitcoin operations"
            echo "  ‚Ä¢ ton         - TON blockchain operations"
            echo "  ‚Ä¢ zetachain   - ZetaChain native operations"
            echo ""
            ;;
        *)
            echo -e "${GREEN}üîç General ZetaChain Information:${NC}"
            echo "‚Ä¢ ZetaChain is an omnichain blockchain platform"
            echo "‚Ä¢ Supports 6 major blockchains: Ethereum, Bitcoin, BSC, Polygon, Solana, Sui, TON"
            echo "‚Ä¢ Features cross-chain deposits, withdrawals, and smart contract calls"
            echo "‚Ä¢ Use 'zetachain ask' for specific help on any topic"
            echo ""
            echo -e "${YELLOW}üí° Most Popular Commands:${NC}"
            echo "  1. zetachain ask (124 uses) - AI assistant"
            echo "  2. zetachain accounts list (114 uses)"
            echo "  3. zetachain query balances (81 uses)"
            echo "  4. zetachain localnet start (81 uses)"
            echo "  5. zetachain solana deposit (54 uses)"
            ;;
    esac
    
    echo ""
    echo -e "${CYAN}üí° Need more help? Try:${NC}"
    echo "‚Ä¢ zetachain ask 'show me transfer commands'"
    echo "‚Ä¢ zetachain ask 'how do I query balances'"
    echo "‚Ä¢ zetachain ask 'what are the account commands'"
    echo "‚Ä¢ zetachain help"
}

# Accounts subcommands (2nd most used category)
accounts_list() {
    echo -e "${BLUE}üìã Listing accounts...${NC}"
    local result=$(call_zetachain "list_wallets" "{}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Accounts:${NC}"
        echo "$result" | jq -r '.result.wallets[]? | "‚Ä¢ " + .name + " - " + .address' 2>/dev/null || echo "No accounts found"
    else
        echo -e "${RED}‚ùå Error getting accounts${NC}"
        echo "Raw response: $result"
    fi
}

accounts_show() {
    local name="$1"
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Usage: zetachain accounts show <account-name>${NC}"
        return
    fi
    
    echo -e "${BLUE}üë§ Showing account: $name${NC}"
    local result=$(call_zetachain "get_wallet_info" "{\"wallet_name\": \"$name\"}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        local wallet=$(echo "$result" | jq -r '.result.wallet')
        echo -e "${GREEN}‚úÖ Account Details:${NC}"
        echo "Name: $(echo "$wallet" | jq -r '.name')"
        echo "Address: $(echo "$wallet" | jq -r '.address')"
        echo "Chain: $(echo "$wallet" | jq -r '.chain')"
    else
        echo -e "${RED}‚ùå Error getting account details${NC}"
        echo "Raw response: $result"
    fi
}

accounts_create() {
    local name="$1"
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Usage: zetachain accounts create <account-name>${NC}"
        return
    fi
    
    echo -e "${BLUE}üîë Creating account: $name${NC}"
    local result=$(call_zetachain "create_wallet" "{\"name\": \"$name\"}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Account created!${NC}"
        echo "Address: $(echo "$result" | jq -r '.result.wallet.address')"
    else
        echo -e "${RED}‚ùå Error creating account${NC}"
        echo "Raw response: $result"
    fi
}

accounts_import() {
    local key="$1"
    local name="$2"
    if [ -z "$key" ] || [ -z "$name" ]; then
        echo -e "${RED}‚ùå Usage: zetachain accounts import <private-key> <account-name>${NC}"
        return
    fi
    
    echo -e "${BLUE}üì• Importing account: $name${NC}"
    local result=$(call_zetachain "import_wallet" "{\"private_key\": \"$key\", \"name\": \"$name\"}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Account imported!${NC}"
        echo "Address: $(echo "$result" | jq -r '.result.wallet.address')"
    else
        echo -e "${RED}‚ùå Error importing account${NC}"
        echo "Raw response: $result"
    fi
}

# Query subcommands (3rd most used category)
query_balances() {
    local address="$1"
    if [ -z "$address" ]; then
        echo -e "${RED}‚ùå Usage: zetachain query balances <address-or-account-name>${NC}"
        return
    fi
    
    echo -e "${BLUE}üí∞ Querying balances for: $address${NC}"
    local result=$(call_zetachain "get_balance" "{\"wallet_name\": \"$address\"}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        local balance=$(echo "$result" | jq -r '.result.balance')
        echo -e "${GREEN}‚úÖ Balance: $(echo "$balance" | jq -r '.eth') $(echo "$balance" | jq -r '.chain | ascii_upcase')${NC}"
    else
        echo -e "${RED}‚ùå Error querying balance${NC}"
        echo "Raw response: $result"
    fi
}

query_chains_list() {
    echo -e "${BLUE}üîó Listing supported chains...${NC}"
    local result=$(call_zetachain "get_supported_chains" "{}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Supported chains:${NC}"
        echo "$result" | jq -r '.result.chains[] | "‚Ä¢ " + .displayName + " (ID: " + (.chainId | tostring) + ")"' 2>/dev/null || echo "No chains found"
    else
        echo -e "${RED}‚ùå Error getting chains${NC}"
        echo "Raw response: $result"
    fi
}

query_cctx() {
    local hash="$1"
    if [ -z "$hash" ]; then
        echo -e "${RED}‚ùå Usage: zetachain query cctx <transaction-hash>${NC}"
        return
    fi
    
    echo -e "${BLUE}üîç Querying cross-chain transaction: $hash${NC}"
    local result=$(call_zetachain "get_cross_chain_status" "{\"tx_hash\": \"$hash\"}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        local status=$(echo "$result" | jq -r '.result.status')
        echo -e "${GREEN}‚úÖ Transaction Status: $status${NC}"
    else
        echo -e "${RED}‚ùå Error querying transaction${NC}"
        echo "Raw response: $result"
    fi
}

# Localnet subcommands
localnet_start() {
    echo -e "${BLUE}üöÄ Starting ZetaChain local network...${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This would start a local ZetaChain network for development${NC}"
    echo "Network would be available at: http://localhost:8545"
    echo "Explorer would be available at: http://localhost:3000"
    echo -e "${GREEN}‚úÖ Local network started (simulated)${NC}"
}

localnet_check() {
    echo -e "${BLUE}üîç Checking local network status...${NC}"
    local result=$(call_zetachain "get_network_info" "{}")
    
    if echo "$result" | jq -e '.success' > /dev/null 2>/dev/null; then
        local info=$(echo "$result" | jq -r '.result')
        echo -e "${GREEN}‚úÖ Network Status:${NC}"
        echo "Network: $(echo "$info" | jq -r '.name')"
        echo "Block: $(echo "$info" | jq -r '.blockNumber')"
        echo "RPC: $(echo "$info" | jq -r '.rpcUrl')"
    else
        echo -e "${RED}‚ùå Network not available${NC}"
        echo "Raw response: $result"
    fi
}

localnet_stop() {
    echo -e "${BLUE}üõë Stopping ZetaChain local network...${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This would stop the local ZetaChain network${NC}"
    echo -e "${GREEN}‚úÖ Local network stopped (simulated)${NC}"
}

# Chain-specific operations
solana_deposit() {
    local amount="$1"
    local recipient="$2"
    if [ -z "$amount" ] || [ -z "$recipient" ]; then
        echo -e "${RED}‚ùå Usage: zetachain solana deposit <amount> <recipient-address>${NC}"
        return
    fi
    
    echo -e "${BLUE}üè¶ Solana Deposit: $amount SOL ‚Üí $recipient${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This would initiate a cross-chain deposit from Solana to ZetaChain${NC}"
    echo "Amount: $amount SOL"
    echo "Recipient: $recipient"
    echo "Estimated time: 2-5 minutes"
    echo -e "${GREEN}‚úÖ Deposit initiated (simulated)${NC}"
}

evm_deposit() {
    local amount="$1"
    local recipient="$2"
    if [ -z "$amount" ] || [ -z "$recipient" ]; then
        echo -e "${RED}‚ùå Usage: zetachain evm deposit <amount> <recipient-address>${NC}"
        return
    fi
    
    echo -e "${BLUE}üè¶ EVM Deposit: $amount ETH ‚Üí $recipient${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This would initiate a cross-chain deposit from EVM chain to ZetaChain${NC}"
    echo "Amount: $amount ETH"
    echo "Recipient: $recipient"
    echo "Estimated time: 1-3 minutes"
    echo -e "${GREEN}‚úÖ Deposit initiated (simulated)${NC}"
}

zetachain_withdraw() {
    local chain="$1"
    local amount="$2"
    local recipient="$3"
    if [ -z "$chain" ] || [ -z "$amount" ] || [ -z "$recipient" ]; then
        echo -e "${RED}‚ùå Usage: zetachain zetachain withdraw <target-chain> <amount> <recipient-address>${NC}"
        return
    fi
    
    echo -e "${BLUE}üèß ZetaChain Withdraw: $amount ZETA ‚Üí $chain ($recipient)${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This would initiate a withdrawal from ZetaChain to $chain${NC}"
    echo "Target Chain: $chain"
    echo "Amount: $amount ZETA"
    echo "Recipient: $recipient"
    echo "Estimated time: 2-10 minutes"
    echo -e "${GREEN}‚úÖ Withdrawal initiated (simulated)${NC}"
}

# Chat interface
zetachain_chat() {
    echo -e "${BLUE}üí¨ ZetaChain Interactive Chat${NC}"
    echo "Welcome to ZetaChain Chat! Type 'exit' to quit."
    echo ""
    
    while true; do
        echo -n -e "${CYAN}zetachain-chat> ${NC}"
        read -r input
        
        case "$input" in
            "exit"|"quit"|"q")
                echo -e "${GREEN}üëã Goodbye!${NC}"
                break
                ;;
            "help")
                echo "Available commands in chat:"
                echo "  ‚Ä¢ ask <question>     - Ask AI assistant"
                echo "  ‚Ä¢ accounts list      - List accounts"
                echo "  ‚Ä¢ query balances     - Check balances"
                echo "  ‚Ä¢ help              - Show this help"
                echo "  ‚Ä¢ exit              - Exit chat"
                ;;
            "accounts list")
                accounts_list
                ;;
            ask*)
                local question="${input#ask }"
                zetachain_ask "$question"
                ;;
            *)
                echo -e "${YELLOW}Unknown command: $input${NC}"
                echo "Type 'help' for available commands or 'exit' to quit."
                ;;
        esac
        echo ""
    done
}

# Faucet
zetachain_faucet() {
    echo -e "${BLUE}üö∞ ZetaChain Testnet Faucet${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This would request testnet tokens from the ZetaChain faucet${NC}"
    echo "Available tokens: ZETA, ETH, BTC, BNB"
    echo "Daily limit: 10 ZETA per address"
    echo -e "${GREEN}‚úÖ Faucet request submitted (simulated)${NC}"
}

# Documentation
zetachain_docs() {
    echo -e "${BLUE}üìö ZetaChain Documentation${NC}"
    echo ""
    echo "üîó Official Documentation:"
    echo "  ‚Ä¢ Main Docs: https://docs.zetachain.com"
    echo "  ‚Ä¢ API Reference: https://docs.zetachain.com/api"
    echo "  ‚Ä¢ Tutorials: https://docs.zetachain.com/tutorials"
    echo "  ‚Ä¢ GitHub: https://github.com/zeta-chain"
    echo ""
    echo "üìñ Quick Links:"
    echo "  ‚Ä¢ Getting Started: https://docs.zetachain.com/get-started"
    echo "  ‚Ä¢ Cross-Chain Guide: https://docs.zetachain.com/cross-chain"
    echo "  ‚Ä¢ Smart Contracts: https://docs.zetachain.com/contracts"
    echo "  ‚Ä¢ CLI Reference: https://docs.zetachain.com/cli"
}

# Help function
show_help() {
    echo -e "${BLUE}üöÄ ZetaChain CLI - Real Command Structure${NC}"
    echo ""
    echo -e "${YELLOW}üìä MOST POPULAR COMMANDS (based on usage):${NC}"
    echo -e "${GREEN}  ask <question>                    ${CYAN}(124 uses)${NC} - AI assistant"
    echo -e "${GREEN}  accounts list                     ${CYAN}(114 uses)${NC} - List accounts"
    echo -e "${GREEN}  query balances <address>          ${CYAN}(81 uses)${NC}  - Check balances"
    echo -e "${GREEN}  localnet start                    ${CYAN}(81 uses)${NC}  - Start local network"
    echo -e "${GREEN}  localnet check                    ${CYAN}(70 uses)${NC}  - Check network status"
    echo ""
    echo -e "${YELLOW}üîë ACCOUNT MANAGEMENT:${NC}"
    echo "  accounts list                     List all accounts"
    echo "  accounts show <name>              Show account details"
    echo "  accounts create <name>            Create new account"
    echo "  accounts import <key> <name>      Import account from private key"
    echo "  accounts delete <name>            Delete account"
    echo ""
    echo -e "${YELLOW}üìä QUERY COMMANDS:${NC}"
    echo "  query balances <address>          Check account balances"
    echo "  query chains list                 List supported chains"
    echo "  query chains show <chain>         Show chain details"
    echo "  query cctx <hash>                 Cross-chain transaction status"
    echo "  query tokens list                 List available tokens"
    echo "  query tokens show <token>         Show token details"
    echo "  query fees                        Query current fees"
    echo ""
    echo -e "${YELLOW}üåê LOCAL NETWORK:${NC}"
    echo "  localnet start                    Start local ZetaChain network"
    echo "  localnet check                    Check network status"
    echo "  localnet stop                     Stop local network"
    echo ""
    echo -e "${YELLOW}üè¶ CROSS-CHAIN OPERATIONS:${NC}"
    echo "  solana deposit <amount> <to>      Deposit from Solana"
    echo "  evm deposit <amount> <to>         Deposit from EVM chains"
    echo "  sui deposit <amount> <to>         Deposit from Sui"
    echo "  zetachain withdraw <chain> <amt> <to>  Withdraw to other chains"
    echo ""
    echo -e "${YELLOW}ü§ñ AI & UTILITIES:${NC}"
    echo "  ask <question>                    AI blockchain assistant"
    echo "  chat                              Interactive chat mode"
    echo "  faucet                            Request testnet tokens"
    echo "  docs                              Open documentation"
    echo ""
    echo -e "${YELLOW}‚ùì HELP:${NC}"
    echo "  help                              Show this help"
    echo ""
    echo -e "${CYAN}üí° Tip: Use 'zetachain ask' for detailed help on any topic!${NC}"
}

# Main command dispatcher
case "$1" in
    # AI Assistant (most used - 124 executions)
    "ask")
        shift
        zetachain_ask "$*"
        ;;
    
    # Account management (2nd category by usage)
    "accounts")
        case "$2" in
            "list")
                accounts_list
                ;;
            "show")
                accounts_show "$3"
                ;;
            "create")
                accounts_create "$3"
                ;;
            "import")
                accounts_import "$3" "$4"
                ;;
            "delete")
                echo -e "${RED}‚ö†Ô∏è  Account deletion not implemented in this demo${NC}"
                ;;
            *)
                echo -e "${RED}‚ùå Usage: zetachain accounts {list|show|create|import|delete}${NC}"
                ;;
        esac
        ;;
    
    # Query commands (3rd category by usage)
    "query")
        case "$2" in
            "balances")
                query_balances "$3"
                ;;
            "chains")
                case "$3" in
                    "list")
                        query_chains_list
                        ;;
                    "show")
                        echo -e "${BLUE}üîó Chain details for: $4${NC}"
                        echo -e "${YELLOW}‚ö†Ô∏è  Chain details not implemented in this demo${NC}"
                        ;;
                    *)
                        echo -e "${RED}‚ùå Usage: zetachain query chains {list|show}${NC}"
                        ;;
                esac
                ;;
            "cctx")
                query_cctx "$3"
                ;;
            "tokens")
                case "$3" in
                    "list"|"show")
                        echo -e "${BLUE}ü™ô Token $3${NC}"
                        echo -e "${YELLOW}‚ö†Ô∏è  Token commands not implemented in this demo${NC}"
                        ;;
                    *)
                        echo -e "${RED}‚ùå Usage: zetachain query tokens {list|show}${NC}"
                        ;;
                esac
                ;;
            "fees")
                echo -e "${BLUE}üí∏ Current fees${NC}"
                echo -e "${YELLOW}‚ö†Ô∏è  Fee query not implemented in this demo${NC}"
                ;;
            *)
                echo -e "${RED}‚ùå Usage: zetachain query {balances|chains|cctx|tokens|fees}${NC}"
                ;;
        esac
        ;;
    
    # Local network commands (4th most used)
    "localnet")
        case "$2" in
            "start")
                localnet_start
                ;;
            "check")
                localnet_check
                ;;
            "stop")
                localnet_stop
                ;;
            *)
                echo -e "${RED}‚ùå Usage: zetachain localnet {start|check|stop}${NC}"
                ;;
        esac
        ;;
    
    # Chain-specific operations
    "solana")
        case "$2" in
            "deposit")
                solana_deposit "$3" "$4"
                ;;
            "deposit-and-call"|"call"|"encode")
                echo -e "${BLUE}‚öôÔ∏è  Solana $2${NC}"
                echo -e "${YELLOW}‚ö†Ô∏è  Advanced Solana operations not implemented in this demo${NC}"
                ;;
            *)
                echo -e "${RED}‚ùå Usage: zetachain solana {deposit|deposit-and-call|call|encode}${NC}"
                ;;
        esac
        ;;
    
    "evm")
        case "$2" in
            "deposit")
                evm_deposit "$3" "$4"
                ;;
            "deposit-and-call"|"call")
                echo -e "${BLUE}‚öôÔ∏è  EVM $2${NC}"
                echo -e "${YELLOW}‚ö†Ô∏è  Advanced EVM operations not implemented in this demo${NC}"
                ;;
            *)
                echo -e "${RED}‚ùå Usage: zetachain evm {deposit|deposit-and-call|call}${NC}"
                ;;
        esac
        ;;
    
    "zetachain")
        case "$2" in
            "withdraw")
                zetachain_withdraw "$3" "$4" "$5"
                ;;
            "withdraw-and-call"|"call")
                echo -e "${BLUE}‚öôÔ∏è  ZetaChain $2${NC}"
                echo -e "${YELLOW}‚ö†Ô∏è  Advanced ZetaChain operations not implemented in this demo${NC}"
                ;;
            *)
                echo -e "${RED}‚ùå Usage: zetachain zetachain {withdraw|withdraw-and-call|call}${NC}"
                ;;
        esac
        ;;
    
    "sui"|"bitcoin"|"ton")
        echo -e "${BLUE}‚öôÔ∏è  $1 operations${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  $1 operations not fully implemented in this demo${NC}"
        echo "Available: $1 deposit <amount> <recipient>"
        ;;
    
    # Utility commands
    "chat")
        zetachain_chat
        ;;
    
    "faucet")
        zetachain_faucet
        ;;
    
    "docs")
        zetachain_docs
        ;;
    
    "new"|"run")
        echo -e "${BLUE}üöÄ $1 command${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Project $1 not implemented in this demo${NC}"
        ;;
    
    "help"|"--help"|"-h")
        show_help
        ;;
    
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        show_help
        ;;
esac
